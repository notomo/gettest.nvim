*gettest.nvim.txt*

==============================================================================
Lua module: gettest                                     *gettest.nvim-gettest*

nodes({opts})                                                *gettest.nodes()*
  Get test nodes.

  Parameters: ~
    {opts} (table|nil) |gettest.nvim-options|

  Return: ~
    (table) list of |gettest.nvim-test-node|
    (table) information used to get tests: {
        source = (number|string) buffer number or specified path's file content
        tool = {
          name = (string)
          language = (string)
          separator = (string)
        }
      }

==============================================================================
TYPES                                                     *gettest.nvim-TYPES*

options                                                 *gettest.nvim-options*

- {scope} (string | nil): one of the following. (default: "all")
  - all : returns all test nodes
  - smallest_ancestor : returns a smallest ancestor test node from target.row
  - largest_ancestor : returns a largest ancestor test node from target.row
- {target} (table | nil)
  - {bufnr} (number | nil): Buffer number that is used if path is nil.
  - {path} (string | nil): file path
  - {row} (string | nil): use to calculate ancestor (1-based index)
- {tool_name} (string | nil): test tool name. |gettest.nvim-SUPPORTED-TOOLS|

test node                                             *gettest.nvim-test-node*

- {children} (table): children nodes. list of |gettest.nvim-test-node|
- {full_name} (string): full name including parent node names
- {name} (string): node name
- {name_nodes} (userdata[]): test name nodes including parent test nodes.
    The last node is own name node.
    See |treesitter-node|.
- {scope_node} (userdata): for example, test function's node.
    See |treesitter-node|.

==============================================================================
SUPPORTED TOOLS                                 *gettest.nvim-SUPPORTED-TOOLS*

- deno_test
- go_test
- jest
- lua_busted

==============================================================================
EXAMPLES                                               *gettest.nvim-EXAMPLES*

test file
>lua
  describe("test1", function()
    it("1-1", function()
      assert.equal(2, 1 + 1)
    end)
    it("1-2", function()
      assert.equal(2, 1 + 1)
    end)
  end)

  describe("test2", function()
    it("2-1", function()
      assert.equal(2, 1 + 1)
    end)
  end)
<

usage
>lua
  local tests = require("gettest").nodes({
    target = {
      path = "./lua/gettest/test/example.lua",
      -- or
      -- bufnr = bufnr
    },
  })
  print(vim.inspect(tests))
<

output
>
  { {
      children = { {
          children = {},
          full_name = "test1 1-1",
          name = "1-1",
          name_nodes = { <userdata 1>, <userdata 2> },
          scope_node = <userdata 3>
        }, {
          children = {},
          full_name = "test1 1-2",
          name = "1-2",
          name_nodes = { <userdata 1>, <userdata 4> },
          scope_node = <userdata 5>
        } },
      full_name = "test1",
      name = "test1",
      name_nodes = { <userdata 1> },
      scope_node = <userdata 6>
    }, {
      children = { {
          children = {},
          full_name = "test2 2-1",
          name = "2-1",
          name_nodes = { <userdata 7>, <userdata 8> },
          scope_node = <userdata 9>
        } },
      full_name = "test2",
      name = "test2",
      name_nodes = { <userdata 7> },
      scope_node = <userdata 10>
    } }
<

==============================================================================
vim:tw=78:ts=8:ft=help
